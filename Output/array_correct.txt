TypeDenoter --> identifier
SingleCommand --> VAR identifier : TypeDenoter
Declaration --> SingleCommand
TypeDenoter --> identifier
SingleCommand --> VAR identifier : TypeDenoter
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
SingleCommand --> VAR identifier : TypeDenoter
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
TypeDenoter --> ARRAY number OF TypeDenoter
SingleCommand --> VAR identifier : TypeDenoter
Declaration --> Declaration ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> ( Expression )
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> ( Expression )
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
SingleCommand --> BEGIN Command END
SingleCommand --> WHILE Expression DO SingleCommand
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
SingleCommand --> BEGIN Command END
SingleCommand --> empty
Command --> SingleCommand
SingleCommand --> BEGIN Command END
SingleCommand --> IF Expression THEN SingleCommand ELSE SingleCommand
Command --> SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
SingleCommand --> BEGIN Command END
SingleCommand --> WHILE Expression DO SingleCommand
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
SingleCommand --> BEGIN Command END
SingleCommand --> WHILE Expression DO SingleCommand
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
ProperActualParamSeq --> ActualParam
ActualParamSeq --> ProperActualParamSeq
SingleCommand --> identifier ( ActualParamSeq )
Command --> SingleCommand
ActualParamSeq --> empty
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
SingleCommand --> BEGIN Command END
SingleCommand --> WHILE Expression DO SingleCommand
Command --> Command ; SingleCommand
SingleCommand --> BEGIN Command END
SingleCommand --> LET Declaration IN SingleCommand
Program --> SingleCommand
