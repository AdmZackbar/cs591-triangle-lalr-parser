VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> SingleCommand
ActualParamSeq --> empty
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
ProperActualParamSeq --> ActualParam
ActualParamSeq --> ProperActualParamSeq
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
ProperActualParamSeq --> ActualParam
ProperActualParamSeq --> ActualParam , ProperActualParamSeq
ActualParamSeq --> ProperActualParamSeq
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
ProperActualParamSeq --> ActualParam
ProperActualParamSeq --> ActualParam , ProperActualParamSeq
ProperActualParamSeq --> ActualParam , ProperActualParamSeq
ProperActualParamSeq --> ActualParam , ProperActualParamSeq
ActualParamSeq --> ProperActualParamSeq
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
VName --> identifier
ActualParam --> VAR VName
ProperActualParamSeq --> ActualParam
ActualParamSeq --> ProperActualParamSeq
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
VName --> identifier
VName --> VName . identifier
ActualParam --> VAR VName
ProperActualParamSeq --> ActualParam
ActualParamSeq --> ProperActualParamSeq
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
ActualParam --> PROC identifier
ProperActualParamSeq --> ActualParam
ActualParamSeq --> ProperActualParamSeq
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
ActualParam --> FUNC identifier
ProperActualParamSeq --> ActualParam
ActualParamSeq --> ProperActualParamSeq
SingleCommand --> identifier ( ActualParamSeq )
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> IF Expression THEN SingleCommand ELSE SingleCommand
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> IF Expression THEN SingleCommand ELSE SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> IF Expression THEN SingleCommand ELSE SingleCommand
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> WHILE Expression DO SingleCommand
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> WHILE Expression DO SingleCommand
SingleCommand --> WHILE Expression DO SingleCommand
Command --> Command ; SingleCommand
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> CONST identifier ~ Expression
Declaration --> SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> LET Declaration IN SingleCommand
Command --> Command ; SingleCommand
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> CONST identifier ~ Expression
Declaration --> SingleCommand
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> CONST identifier ~ Expression
Declaration --> SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> LET Declaration IN SingleCommand
SingleCommand --> LET Declaration IN SingleCommand
Command --> Command ; SingleCommand
VName --> identifier
VName --> VName . identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> VName . identifier
VName --> VName . identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> VName . identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> VName . identifier
VName --> VName . identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> VName [ Expression ]
VName --> VName . identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> CONST identifier ~ Expression
Declaration --> SingleCommand
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
Expression --> LET Declaration IN Expression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
Expression --> IF Expression THEN Expression ELSE Expression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> character
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
ActualParamSeq --> empty
PrimaryExpression --> identifier ( ActualParamSeq )
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
ProperActualParamSeq --> ActualParam
ActualParamSeq --> ProperActualParamSeq
PrimaryExpression --> identifier ( ActualParamSeq )
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ActualParam --> Expression
ProperActualParamSeq --> ActualParam
ProperActualParamSeq --> ActualParam , ProperActualParamSeq
ProperActualParamSeq --> ActualParam , ProperActualParamSeq
ActualParamSeq --> ProperActualParamSeq
PrimaryExpression --> identifier ( ActualParamSeq )
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> ( Expression )
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> ( Expression )
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> ( Expression )
SecondaryExpression --> PrimaryExpression
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> ( Expression )
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> ( Expression )
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
RecordAggregate --> identifier ~ Expression
PrimaryExpression --> { RecordAggregate }
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
RecordAggregate --> identifier ~ Expression
RecordAggregate --> identifier ~ Expression , RecordAggregate
RecordAggregate --> identifier ~ Expression , RecordAggregate
PrimaryExpression --> { RecordAggregate }
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ArrayAggregate --> Expression
PrimaryExpression --> [ ArrayAggregate ]
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
ArrayAggregate --> Expression
ArrayAggregate --> Expression , ArrayAggregate
ArrayAggregate --> Expression , ArrayAggregate
PrimaryExpression --> [ ArrayAggregate ]
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
Command --> Command ; SingleCommand
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> CONST identifier ~ Expression
Declaration --> SingleCommand
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> CONST identifier ~ Expression
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
SingleCommand --> VAR identifier : TypeDenoter
Declaration --> Declaration ; SingleCommand
FormalParamSeq --> empty
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> PROC identifier ( FormalParamSeq ) ~ SingleCommand
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
FormalParam --> identifier : TypeDenoter
ProperFormalParamSeq --> FormalParam
FormalParamSeq --> ProperFormalParamSeq
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> PROC identifier ( FormalParamSeq ) ~ SingleCommand
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
FormalParam --> identifier : TypeDenoter
TypeDenoter --> identifier
FormalParam --> identifier : TypeDenoter
TypeDenoter --> identifier
FormalParam --> identifier : TypeDenoter
ProperFormalParamSeq --> FormalParam
ProperFormalParamSeq --> FormalParam , ProperFormalParamSeq
ProperFormalParamSeq --> FormalParam , ProperFormalParamSeq
FormalParamSeq --> ProperFormalParamSeq
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> PROC identifier ( FormalParamSeq ) ~ SingleCommand
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
FormalParam --> VAR identifier : TypeDenoter
ProperFormalParamSeq --> FormalParam
FormalParamSeq --> ProperFormalParamSeq
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> PROC identifier ( FormalParamSeq ) ~ SingleCommand
Declaration --> Declaration ; SingleCommand
FormalParamSeq --> empty
FormalParam --> PROC identifier ( FormalParamSeq )
ProperFormalParamSeq --> FormalParam
FormalParamSeq --> ProperFormalParamSeq
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> PROC identifier ( FormalParamSeq ) ~ SingleCommand
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
FormalParam --> identifier : TypeDenoter
ProperFormalParamSeq --> FormalParam
FormalParamSeq --> ProperFormalParamSeq
FormalParam --> PROC identifier ( FormalParamSeq )
ProperFormalParamSeq --> FormalParam
FormalParamSeq --> ProperFormalParamSeq
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> PROC identifier ( FormalParamSeq ) ~ SingleCommand
Declaration --> Declaration ; SingleCommand
FormalParamSeq --> empty
TypeDenoter --> identifier
FormalParam --> FUNC identifier ( FormalParamSeq ) : TypeDenoter
ProperFormalParamSeq --> FormalParam
FormalParamSeq --> ProperFormalParamSeq
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> PROC identifier ( FormalParamSeq ) ~ SingleCommand
Declaration --> Declaration ; SingleCommand
FormalParamSeq --> empty
TypeDenoter --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> FUNC identifier ( FormalParamSeq ) : TypeDenoter ~ Expression
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
FormalParam --> identifier : TypeDenoter
TypeDenoter --> identifier
FormalParam --> identifier : TypeDenoter
TypeDenoter --> identifier
FormalParam --> identifier : TypeDenoter
ProperFormalParamSeq --> FormalParam
ProperFormalParamSeq --> FormalParam , ProperFormalParamSeq
ProperFormalParamSeq --> FormalParam , ProperFormalParamSeq
FormalParamSeq --> ProperFormalParamSeq
TypeDenoter --> identifier
VName --> identifier
PrimaryExpression --> VName
SecondaryExpression --> PrimaryExpression
PrimaryExpression --> number
SecondaryExpression --> SecondaryExpression op PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> FUNC identifier ( FormalParamSeq ) : TypeDenoter ~ Expression
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
SingleCommand --> TYPE identifier ~ TypeDenoter
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
TypeDenoter --> ARRAY number OF TypeDenoter
SingleCommand --> TYPE identifier ~ TypeDenoter
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
RecordTypeDenoter --> identifier : TypeDenoter
TypeDenoter --> RECORD RecordTypeDenoter END
SingleCommand --> TYPE identifier ~ TypeDenoter
Declaration --> Declaration ; SingleCommand
TypeDenoter --> identifier
TypeDenoter --> identifier
TypeDenoter --> identifier
RecordTypeDenoter --> identifier : TypeDenoter
RecordTypeDenoter --> identifier : TypeDenoter , RecordTypeDenoter
RecordTypeDenoter --> identifier : TypeDenoter , RecordTypeDenoter
TypeDenoter --> RECORD RecordTypeDenoter END
SingleCommand --> TYPE identifier ~ TypeDenoter
Declaration --> Declaration ; SingleCommand
VName --> identifier
PrimaryExpression --> number
SecondaryExpression --> PrimaryExpression
Expression --> SecondaryExpression
SingleCommand --> VName := Expression
SingleCommand --> LET Declaration IN SingleCommand
Command --> Command ; SingleCommand
SingleCommand --> BEGIN Command END
Program --> SingleCommand
