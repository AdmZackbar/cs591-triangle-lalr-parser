! Program -> Single-Command
! Single-Command -> BEGIN Command END
begin
    ! Single-Command -> V-Name := Expression
    x := 1;
    ! Single-Command -> Identifier ( Actual-Param-Sequence )
    ! Actual-Param-Sequence
    a();
    a(1);
    a(1,x);
    a(1,x,y,z);
    a(var x);
    a(var x.y);
    a(proc y);
    a(func z);
    ! Single-Command -> IF Expression THEN Single-Command ELSE Single-Command
    if x < 1 then
        x := 1
    else
        x := 2;
    ! Nested
    if x > 1 then
        if y < x then
            y := 1
        else
            y := 2
    else
        x := 1;
    ! Single-Command -> WHILE Expression DO Single-Command
    while x do
        x := x + 1;
    ! Nested
    while x do
        while y do
            x := x - y;
    ! Single-Command -> LET Declaration IN Single-Command
    let
        const x ~ 1
    in
        y := x;
    ! Nested
    let
        const x ~ 1
    in
        let
            const y ~ 2
        in
            z := x + y;
    ! V-name
    x.y := 1;
    x.y.z := 2;
    x[1] := 3;
    x.y[1] := 4;
    x.y.z[2][1].a := 5;
    ! Expression -> LET Declaration IN Expression
    x := let
        const y ~ 1
    in
        y + 1;
    ! Expression -> IF Expression THEN Expression ELSE Expression
    x := if a then b else c;
    ! Expression -> Secondary-Expression
    ! Secondary-Expression -> Secondary-Expression Operator Primary-Expression
    x := a + b;
    x := a / b * c /\ d;
    ! Secondary-Expression := Primary-Expression
    x := 1;
    x := 'a';
    x := c;
    x := f();
    x := f(1);
    x := f(x,y,z);
    x := (y);
    x := (x + y) * z;
    x := (((x) - y));
    x := { a ~ 1 };
    x := { a ~ 1, b ~ 2, c ~ 3 };
    x := [ 1 ];
    x := [ 1, 2, 3 ];
    ! Declaration
    let
        const a ~ 1;
        const b ~ 2+4;
        var c : integer;
        ! Formal-Param-Sequence
        proc d() ~ x := 1;
        proc e(a:int) ~ x := 2;
        proc f(a:int,b:bool,c:char) ~ x := 3;
        proc f(var a:int) ~ x := 4;
        proc f(proc c()) ~ x := 5;
        proc f(proc d(a:int)) ~ x := 6;
        proc f(func e():int) ~ x := 7;
        func g(): integer ~ x-3;
        func g(a:int,b:bool,c:char): integer ~ x-1;
        ! Type-Denoter
        type h ~ integer;
        type t ~ array 3 of h;
        type s ~ record a : integer end;
        type q ~ record
            b : bool,
            c : int,
            d : q
        end
    in
        x := 1
end
