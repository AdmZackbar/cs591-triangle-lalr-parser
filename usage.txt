
# Build and run the scanner, and display a token stream
lex calc0.l
gcc lex.yy.c
./a.out < input.txt

# Build and run the parser, and display a rightmost derivation in reverse
lex calc1.l
yacc calc1.y
gcc y.tab.c
./a.out < input.txt

# Build and run the parser/interpreter, and evaluate an arithmetic expression
yacc calc2.y
gcc y.tab.c
./a.out < input.txt

